---
import Layout from '../layouts/Layout.astro';
import Quotes from '../components/Quotes.astro';

interface QuoteData {
  id: number;
  quote: string;
  createdAt: string;
}

interface CacheInfo {
  cacheStatus: string;
  region: string;
  lastModified: string;
}

interface QuoteResult {
  data: QuoteData;
  info: CacheInfo;
  time: number;
}

let cacheStrategies: {
  ttl: QuoteResult;
  swr: QuoteResult;
  both: QuoteResult;
  none: QuoteResult;
} = {
  ttl: { data: { id: 0, quote: '', createdAt: '' }, info: { cacheStatus: '', region: '', lastModified: '' }, time: 0 },
  swr: { data: { id: 0, quote: '', createdAt: '' }, info: { cacheStatus: '', region: '', lastModified: '' }, time: 0 },
  both: { data: { id: 0, quote: '', createdAt: '' }, info: { cacheStatus: '', region: '', lastModified: '' }, time: 0 },
  none: { data: { id: 0, quote: '', createdAt: '' }, info: { cacheStatus: '', region: '', lastModified: '' }, time: 0 }
};

try {
  console.log('Fetching quotes...');
  const response = await fetch(`http://localhost:4321/route`);
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  const data = await response.json();
  cacheStrategies = data.cacheStrategies;
} catch (error) {
  console.error('Error fetching quotes:', error);
}
---

<Layout title="Prisma Accelerate + Astro">
  <main>
    <h1>Prisma Accelerate with <span class="text-gradient">Astro</span></h1>
    <Quotes cacheStrategies={cacheStrategies} />
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>